#include <stdio.h>

struct Process {
    int pid;            // Process ID
    int burst_time;     // Burst Time
    int waiting_time;   // Waiting Time
    int turnaround_time;// Turnaround Time
    int priority;       // Priority (lower value means higher priority)
};

void calculateTimes(struct Process proc[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    proc[0].waiting_time = 0; // The first process has no waiting time

    // Calculate waiting time and turnaround time for each process
    for (int i = 1; i < n; i++) {
        proc[i].waiting_time = proc[i - 1].waiting_time + proc[i - 1].burst_time;
        total_waiting_time += proc[i].waiting_time;
        proc[i].turnaround_time = proc[i].waiting_time + proc[i].burst_time;
        total_turnaround_time += proc[i].turnaround_time;
    }

    // Calculate average waiting time and turnaround time
    printf("\nProcess ID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f", (float)total_turnaround_time / n);
}

int main() {
    int n;

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        proc[i].pid = i + 1;  // Process ID
        printf("\nEnter burst time and priority for Process %d\n", proc[i].pid);
        printf("Burst time: ");
        scanf("%d", &proc[i].burst_time);
        printf("Priority (lower value means higher priority): ");
        scanf("%d", &proc[i].priority);
    }

    // Sort processes based on priority (lowest priority number first)
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (proc[i].priority > proc[j].priority) {
                temp = proc[i];
                proc[i] = proc[j];
                proc[j] = temp;
            }
        }
    }

    // Calculate waiting and turnaround times
    calculateTimes(proc, n);

    return 0;
}
