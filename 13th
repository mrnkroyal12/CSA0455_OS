#include <stdio.h>

void bestfit(int mp[], int p[], int m, int n) {
    int j = 0;
    for (int i = 0; i < m; i++) {
        if (j < n && mp[j] >= p[i]) {
            printf("\nProcess %d of size %d fits in memory partition %d", p[i], p[i], mp[j]);
            mp[j] -= p[i];  // Reduce the memory partition size
            j++;
        }
    }

    for (int i = j; i < m; i++) {
        printf("\nProcess %d must wait for memory", p[i]);
    }
}

void rsort(int a[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (a[i] < a[j]) {  // Sorting in descending order
                int t = a[i];
                a[i] = a[j];
                a[j] = t;
            }
        }
    }
}

void sort(int a[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (a[i] > a[j]) {  // Sorting in ascending order
                int t = a[i];
                a[i] = a[j];
                a[j] = t;
            }
        }
    }
}

void firstfit(int mp[], int p[], int m, int n) {
    sort(mp, n); // Sort memory partitions in ascending order
    sort(p, m);  // Sort processes in ascending order
    bestfit(mp, p, m, n); // Reuse the bestfit function logic
}

void worstfit(int mp[], int p[], int m, int n) {
    rsort(mp, n); // Sort memory partitions in descending order
    sort(p, m);   // Sort processes in ascending order
    bestfit(mp, p, m, n); // Reuse the bestfit function logic
}

int main() {
    int m, n, mp[20], p[20], ch;
    
    printf("Enter the number of memory partitions: ");
    scanf("%d", &n);
    
    printf("Enter the number of processes: ");
    scanf("%d", &m);
    
    printf("Enter the memory partitions: \n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &mp[i]);
    }
    
    printf("Enter the process sizes: \n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &p[i]);
    }
    
    printf("1. First Fit\n2. Best Fit\n3. Worst Fit\nEnter your choice: ");
    scanf("%d", &ch);
    
    switch (ch) {
        case 1:
            firstfit(mp, p, m, n);
            break;
        case 2:
            bestfit(mp, p, m, n);
            break;
        case 3:
            worstfit(mp, p, m, n);
            break;
        default:
            printf("Invalid choice\n");
            break;
    }
    
    return 0;
}
