#include<stdio.h>

int main() {
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;

    // Taking input for number of processes
    printf("Total number of processes in the system: ");
    scanf("%d", &NOP);
    y = NOP;

    // Taking input for Arrival Time and Burst Time of each process
    for(i = 0; i < NOP; i++) {
        printf("\nEnter the Arrival and Burst time of Process[%d]:\n", i + 1);
        printf("Arrival time is: ");
        scanf("%d", &at[i]);
        printf("Burst time is: ");
        scanf("%d", &bt[i]);
        temp[i] = bt[i]; // Temporary array for burst times
    }

    // Taking input for Time Quantum
    printf("Enter the Time Quantum for the process: ");
    scanf("%d", &quant);

    // Printing header for results
    printf("\nProcess No\tBurst Time\tTurnaround Time\tWaiting Time\n");

    // Round Robin Scheduling Logic
    for(sum = 0, i = 0; y != 0;) {
        if(temp[i] <= quant && temp[i] > 0) {
            sum = sum + temp[i];
            temp[i] = 0;
            count = 1;
        } else if(temp[i] > 0) {
            temp[i] = temp[i] - quant;
            sum = sum + quant;
        }

        // If process has completed
        if(temp[i] == 0 && count == 1) {
            y--;
            tat = sum - at[i]; // Turnaround Time (TAT) = Completion Time - Arrival Time
            wt = tat - bt[i];  // Waiting Time (WT) = TAT - Burst Time
            printf("Process[%d]\t\t%d\t\t\t%d\t\t\t%d\n", i + 1, bt[i], tat, wt);
            count = 0;
        }

        // Cycle through processes (round-robin)
        if(i == NOP - 1)
            i = 0;
        else if(at[i + 1] <= sum)
            i++;
        else
            i = 0;
    }

    // Calculating average turnaround time and average waiting time
    avg_wt = wt * 1.0 / NOP;
    avg_tat = tat * 1.0 / NOP;

    // Printing average times
    printf("\nAverage Turnaround Time: %f", avg_tat);
    printf("\nAverage Waiting Time: %f", avg_wt);

    return 0;
}
